name: Quirky Repo Activities

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes
  workflow_dispatch:  # Allows manual trigger

jobs:
  auto-activities:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.FINE_GRAINED_PAT }}
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Create and run activity script
      id: activity
      run: |
        cat > activity_script.py << EOL
        import random
        import datetime
        import os

        def should_act():
            now = datetime.datetime.now()
            date_string = now.strftime("%Y-%m-%d")
            activity_file = "commit_data.txt"

            if not os.path.exists(activity_file) or os.path.getsize(activity_file) == 0:
                activities_today = 0
                target_activities = random.randint(10, 50)
            else:
                with open(activity_file, "r") as f:
                    try:
                        last_date, activities_today, target_activities = f.read().strip().split(",")
                        activities_today = int(activities_today)
                        target_activities = int(target_activities)
                        if last_date != date_string:
                            activities_today = 0
                            target_activities = random.randint(10, 50)
                    except ValueError:
                        activities_today = 0
                        target_activities = random.randint(10, 50)

            if activities_today >= target_activities:
                return "none"

            time_left = (datetime.datetime.combine(now.date(), datetime.time.max) - now).total_seconds()
            intervals_left = max(1, time_left / 300)  # Ensure we don't divide by zero
            prob_act = (target_activities - activities_today) / intervals_left

            if random.random() < prob_act:
                activities_today += 1
                activity_type = random.choice(["commit", "pr", "issue", "merge_pr", "close_issue", "review_pr"])
            else:
                activity_type = "none"

            with open(activity_file, "w") as f:
                f.write(f"{date_string},{activities_today},{target_activities}")

            return activity_type

        activity = should_act()
        print(f"ACTIVITY={activity}")

        if activity != "none":
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with open("activity_log.txt", "a") as f:
                f.write(f"Activity: {activity} at {timestamp}\\n")
        EOL

        output=$(python activity_script.py)
        echo "$output" >> $GITHUB_OUTPUT

    - name: Commit changes
      if: steps.activity.outputs.ACTIVITY != 'none'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git pull origin main
        git add commit_data.txt activity_log.txt
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto activity: ${{ steps.activity.outputs.ACTIVITY }} at $(date -u)"
          git push || git pull --rebase origin main && git push
        fi

    - name: Create Pull Request
      if: steps.activity.outputs.ACTIVITY == 'pr'
      run: |
        branch_name="auto-pr-$(date +%s)"
        git checkout -b $branch_name
        echo "This is an auto-generated PR at $(date -u)" >> auto_pr_file.txt
        git add auto_pr_file.txt
        git commit -m "Auto activity: Create PR at $(date -u)"
        git push --set-upstream origin $branch_name || (git pull --rebase origin $branch_name && git push --set-upstream origin $branch_name)
        gh pr create --title "Auto PR: $(date -u)" --body "This is an automatically generated Pull Request." --head $branch_name
      env:
        GH_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}

    - name: Create Issue
      if: steps.activity.outputs.ACTIVITY == 'issue'
      run: |
        gh issue create --title "Auto Issue: $(date -u)" --body "This is an automatically generated Issue."
      env:
        GH_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}

    - name: Merge Random Pull Request
      if: steps.activity.outputs.ACTIVITY == 'merge_pr'
      run: |
        PR_TO_MERGE=$(gh pr list --limit 1 --json number --jq '.[0].number')
        if [ ! -z "$PR_TO_MERGE" ]; then
          gh pr merge $PR_TO_MERGE --merge --delete-branch
          echo "Merged PR #$PR_TO_MERGE"
        else
          echo "No open PRs to merge"
        fi
      env:
        GH_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}

    - name: Close Random Issue
      if: steps.activity.outputs.ACTIVITY == 'close_issue'
      run: |
        ISSUE_TO_CLOSE=$(gh issue list --limit 1 --json number --jq '.[0].number')
        if [ ! -z "$ISSUE_TO_CLOSE" ]; then
          gh issue close $ISSUE_TO_CLOSE
          echo "Closed issue #$ISSUE_TO_CLOSE"
        else
          echo "No open issues to close"
        fi
      env:
        GH_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}

    - name: Review Random Pull Request
      if: steps.activity.outputs.ACTIVITY == 'review_pr'
      run: |
        PR_TO_REVIEW=$(gh pr list --limit 1 --json number --jq '.[0].number')
        if [ ! -z "$PR_TO_REVIEW" ]; then
          REVIEW_ACTIONS=("approve" "comment" "request-changes")
          RANDOM_ACTION=${REVIEW_ACTIONS[$RANDOM % ${#REVIEW_ACTIONS[@]}]}
          case $RANDOM_ACTION in
            approve)
              gh pr review $PR_TO_REVIEW --approve -b "Auto-approved by Quirky Repo Activities"
              ;;
            comment)
              gh pr review $PR_TO_REVIEW --comment -b "Auto-comment: This PR looks interesting!"
              ;;
            request-changes)
              gh pr review $PR_TO_REVIEW --request-changes -b "Auto-review: Some changes might be needed here."
              ;;
          esac
          echo "Reviewed PR #$PR_TO_REVIEW with action: $RANDOM_ACTION"
        else
          echo "No open PRs to review"
        fi
      env:
        GH_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}
